generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  // Relaciones
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relaciones
  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?

  // Relaciones
  Order Order[]
}

model UserAddress {
  id           String  @id @default(uuid())
  nombre       String
  apellidos    String
  direccion    String
  direccion2   String?
  codigoPostal String
  telefono     String
  ciudad       String
  pais         String

  // Relaciones
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// Order de compras

model Order {
  id           String    @id @default(uuid())
  subtotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paitAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relaciones
  userId       String
  User         User          @relation(fields: [userId], references: [id])
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // Relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model OrderAddress {
  id           String  @id @default(uuid())
  nombre       String
  apellidos    String
  direccion    String
  direccion2   String?
  codigoPostal String
  telefono     String
  ciudad       String
  pais         String

  // Relaciones
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
}
